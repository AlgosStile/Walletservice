package wallet_service.in.service;

import org.junit.Before;
import org.junit.Test;
import wallet_service.in.controller.TransactionType;
import wallet_service.in.model.Action;
import wallet_service.in.model.Player;
import wallet_service.in.model.Transaction;
import wallet_service.out.repository.PlayerRepository;
import wallet_service.out.repository.TransactionRepository;

import java.util.List;

import static org.junit.Assert.*;

public class PlayerServiceImplTest {

    private PlayerService playerService;
    private PlayerRepository playerRepository;

    @Before
    public void setUp() {
        playerRepository = new PlayerRepository();
        TransactionRepository transactionRepository = new TransactionRepository();
        playerService = new PlayerServiceImpl(playerRepository, transactionRepository);
    }

    /**
     * addAction() –∏ testGetPlayerActions() üß™
     * –ü—Ä–æ–≤–µ—Ä—è—é—Ç, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –¥–ª—è –∏–≥—Ä–æ–∫–∞
     * –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ getPlayerActions().
     */
    @Test
    public void addAction() {
        playerService.addAction("username", "action", "detail");

        List<Action> actions = playerService.getPlayerActions("username");

        assertEquals(1, actions.size());
        assertEquals("username", actions.get(0).getUsername());
        assertEquals("action", actions.get(0).getAction());
        assertEquals("detail", actions.get(0).getDetail());
    }

    @Test
    public void testGetPlayerActions() {
        playerService.addAction("username", "action1", "detail1");
        playerService.addAction("username", "action2", "detail2");

        List<Action> actions = playerService.getPlayerActions("username");

        assertEquals(2, actions.size());
        assertEquals("action1", actions.get(0).getAction());
        assertEquals("action2", actions.get(1).getAction());
        assertEquals("detail1", actions.get(0).getDetail());
        assertEquals("detail2", actions.get(1).getDetail());
    }

    /**
     * checkingUsernameThereAreNoActionsInTheSystem() üß™
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–µ—Ä–Ω–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
     * –¥–µ–π—Å—Ç–≤–∏–π.
     */
    @Test
    public void checkingUsernameThereAreNoActionsInTheSystem() {
        List<Action> actions = playerService.getPlayerActions("username");

        assertNotNull(actions);
        assertEquals(0, actions.size());
    }

    /**
     * testRegisterPlayer() –∏ testAuthenticatePlayer() üß™
     * –ü—Ä–æ–≤–µ—Ä—è—é—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    @Test
    public void testRegisterPlayer() {
        PlayerRepository playerRepository = new PlayerRepository();
        TransactionRepository transactionRepository = new TransactionRepository();
        PlayerService playerService = new PlayerServiceImpl(playerRepository, transactionRepository);

        playerService.registerPlayer("username", "password");

        assertNotNull(playerRepository.getPlayer("username"));
    }

    @Test
    public void testAuthenticatePlayer() {
        PlayerRepository playerRepository = new PlayerRepository();
        TransactionRepository transactionRepository = new TransactionRepository();
        PlayerService playerService = new PlayerServiceImpl(playerRepository, transactionRepository);
        playerService.registerPlayer("username", "password");

        boolean authenticated = playerService.authenticatePlayer("username", "password");

        assertTrue(authenticated);
    }

    /**
     * TestAuthenticatePlayer_invalidUsername() –∏ testAuthenticatePlayer_invalidPassword() üß™
     * –ü—Ä–æ–≤–µ—Ä—è—é—Ç, —á—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª–µ.
     */
    @Test
    public void testAuthenticatePlayer_invalidUsername() {
        boolean authenticated = playerService.authenticatePlayer("username", "password");

        assertFalse(authenticated);
    }

    @Test
    public void testAuthenticatePlayer_invalidPassword() {
        playerRepository.addPlayer(new Player("username", "password"));

        boolean authenticated = playerService.authenticatePlayer("username", "wrongPassword");

        assertFalse(authenticated);
    }

    /**
     * testGetBalance() üß™
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
     */
    @Test
    public void testGetBalance() throws Exception {
        PlayerRepository playerRepository = new PlayerRepository();
        TransactionRepository transactionRepository = new TransactionRepository();
        PlayerService playerService = new PlayerServiceImpl(playerRepository, transactionRepository);
        playerService.registerPlayer("username", "password");
        playerService.credit("username", "transactionId", 100.0);

        double balance = playerService.getBalance("username");

        assertEquals(100.0, balance, 0.0);
    }

    /**
     * debit() –∏ credit() üß™
     * –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–µ–±–µ—Ç–∞ –∏ –∫—Ä–µ–¥–∏—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—Ç –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
     * –∏ –¥–æ–±–∞–≤–ª—è—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
     */
    @Test
    public void debit() throws Exception {
        playerRepository.addPlayer(new Player("username", "password"));
        playerService.credit("username", "transactionId1", 100.0);

        playerService.debit("username", "transactionId2", 50.0);

        Player player = playerRepository.getPlayer("username");
        assertEquals(50.0, player.getBalance(), 0.0);
        assertEquals(2, player.getTransactions().size());
        assertEquals(TransactionType.DEBIT, player.getTransactions().get(1).getType());
    }

    /**
     * debit_insufficientBalance() –∏ debit_nonexistentUser_shouldThrowException()
     * credit_nonexistentUser_shouldThrowException() –∏ testCredit_invalidUsername() üß™
     * –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
     */
    @Test
    public void debit_insufficientBalance() {
        playerRepository.addPlayer(new Player("username", "password"));

        try {
            playerService.debit("username", "transactionId", 50.0);
            fail("Expected an Exception to be thrown");
        } catch (Exception e) {
            assertEquals("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", e.getMessage());
        }

        Player player = playerRepository.getPlayer("username");
        assertEquals(0.0, player.getBalance(), 0.0);

    }

    @Test
    public void debit_nonexistentUser_shouldThrowException() {
        try {
            playerService.debit("nonexistentUsername", "transactionId", 50.0);
            fail("Expected an Exception to be thrown");
        } catch (Exception e) {
            assertEquals("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", e.getMessage());
        }
    }

    @Test
    public void credit_nonexistentUser_shouldThrowException() {
        try {
            playerService.credit("nonexistentUsername", "transactionId", 50.0);
            fail("Expected an Exception to be thrown");
        } catch (Exception e) {
            assertEquals("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", e.getMessage());
        }
    }


    @Test
    public void credit() throws Exception {
        playerRepository.addPlayer(new Player("username", "password"));

        playerService.credit("username", "transactionId", 100.0);

        Player player = playerRepository.getPlayer("username");
        assertEquals(100.0, player.getBalance(), 0.0);
        assertEquals(1, player.getTransactions().size());
        assertEquals(TransactionType.CREDIT, player.getTransactions().get(0).getType());
    }

    @Test
    public void testCredit_invalidUsername() {
        try {
            playerService.credit("username", "transactionId", 100.0);
            fail("Expected an Exception to be thrown");
        } catch (Exception e) {
            assertEquals("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", e.getMessage());
        }
    }

    /**
     * testIsUserAuthenticated_returnsTrue_whenUsernameMatchesAuthenticatedUser() üß™
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏ –º–µ—Ç–æ–¥ isUserAuthenticated() true,
     * –∫–æ–≥–¥–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
     */
    @Test
    public void testIsUserAuthenticated_returnsTrue_whenUsernameMatchesAuthenticatedUser() {
        Player player = new Player("JohnDoe", "password");
        playerRepository.addPlayer(player);
        playerService.authenticatePlayer("JohnDoe", "password");

        boolean result = playerService.isUserAuthenticated("JohnDoe");
        assertTrue(result);
    }

    /**
     * testIsUserAuthenticated_returnsFalse_whenUsernameDoesNotMatchAuthenticatedUser() üß™
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏ –º–µ—Ç–æ–¥ isUserAuthenticated() false,
     * –∫–æ–≥–¥–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
     */
    @Test
    public void testIsUserAuthenticated_returnsFalse_whenUsernameDoesNotMatchAuthenticatedUser() {
        Player player = new Player("JohnDoe", "password");
        playerRepository.addPlayer(player);
        playerService.authenticatePlayer("JohnDoe", "password");

        boolean result = playerService.isUserAuthenticated("JaneSmith");
        assertFalse(result);
    }


    /**
     * getTransactionHistory() üß™
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–≥—Ä–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
     */
    @Test
    public void getTransactionHistory() throws Exception {
        playerRepository.addPlayer(new Player("username", "password"));
        playerService.credit("username", "transactionId1", 100.0);
        playerService.debit("username", "transactionId2", 50.0);

        List<Transaction> transactions = playerService.getTransactionHistory("username");

        assertEquals(2, transactions.size());
        assertEquals(TransactionType.CREDIT, transactions.get(0).getType());
        assertEquals(TransactionType.DEBIT, transactions.get(1).getType());
    }

    /**
     * logout() üß™
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–≥—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
     */
    @Test
    public void logout() {
        playerService.logout("username");

        List<Action> actions = playerService.getPlayerActions("username");

        assertEquals(1, actions.size());
        assertEquals("username", actions.get(0).getUsername());
        assertEquals("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", actions.get(0).getAction());
        assertEquals("", actions.get(0).getDetail());
    }
}