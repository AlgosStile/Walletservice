package wallet_service.in.controller;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;

import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;



import java.sql.SQLException;

@Testcontainers
public class PlayerControllerTest {

    @Container
    private static PostgreSQLContainer<?> postgreSQLContainer = new PostgreSQLContainer<>("postgres");

    private PlayerController playerController;

    @BeforeAll
    static void setUp() {
        postgreSQLContainer.start();
        System.setProperty("DB_URL", postgreSQLContainer.getJdbcUrl());
        System.setProperty("DB_USERNAME", postgreSQLContainer.getUsername());
        System.setProperty("DB_PASSWORD", postgreSQLContainer.getPassword());
    }

    @BeforeEach
    void initialize() throws SQLException {
        playerController = new PlayerController();
    }

    @AfterAll
    static void tearDown() {
        postgreSQLContainer.stop();
    }

    @Test
    @DisplayName("test")
    void registerPlayer_Success() {
        // Arrange
        String username = "testuser";
        String password = "testpassword";

        // Act
        playerController.registerPlayer(username, password);

        // Assert
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        // –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –±—ã–ª–æ –≤—ã–≤–µ–¥–µ–Ω–æ.
        assertEquals("–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üòÄ", getConsoleOutput());
    }

    @Test
    @DisplayName("test")
    void registerPlayer_Failure() {
        // Arrange
        String username = "existinguser";
        String password = "testpassword";

        // Act
        playerController.registerPlayer(username, password);

        // Assert
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
        // –∏–≥—Ä–æ–∫–∞ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–º–µ–Ω–µ–º
        // –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        assertEquals("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ üòû", getConsoleOutput());
    }

    @Test
    @DisplayName("test")
    void authenticatePlayer_Success() throws SQLException {
        // Arrange
        String username = "testuser";
        String password = "testpassword";

        // Act
        playerController.authenticatePlayer(username, password);

        // Assert
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        // –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –≤—ã–≤–µ–¥–µ–Ω–æ.
        assertEquals("–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!", getConsoleOutput());
    }

    @Test
    @DisplayName("test")
    void authenticatePlayer_Failure() throws SQLException {
        // Arrange
        String username = "nonexistentuser";
        String password = "testpassword";

        // Act
        playerController.authenticatePlayer(username, password);

        // Assert
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        // —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        assertEquals("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å", getConsoleOutput());
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
    private String getConsoleOutput() {
        // –í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å System.out.println()
        // –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –≤ ByteArrayOutputStream
        // –∏ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É.
        return "";
    }
}
